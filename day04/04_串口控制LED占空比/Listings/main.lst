C51 COMPILER V9.60.7.0   MAIN                                                              06/23/2024 21:43:24 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "Config.h"
   2          #include "GPIO.h"
   3          #include "Delay.h"
   4          #include "Timer.h"
   5          #include "UART.h"
   6          #include "Switch.h"
   7          #include "NVIC.h"
   8          #include "STC8H_PWM.h"
   9          
  10          #define LED_SW P45
  11          
  12          #define LED4 P14
  13          #define LED3 P15
  14          #define LED8 P20
  15          #define LED7 P21
  16          #define LED6 P22
  17          #define LED5 P23
  18          #define LED2 P26
  19          #define LED1 P27
  20          
  21          #define HIGH 1
  22          #define LOW 0
  23          
  24          /*初始化GPIO*/
  25          void gpio_init(void)
  26          {
  27   1        /* UART端口 */
  28   1        GPIO_InitTypeDef gpio_config;
  29   1        gpio_config.Pin = GPIO_Pin_0 | GPIO_Pin_1;
  30   1        gpio_config.Mode = GPIO_PullUp;
  31   1        GPIO_Inilize(GPIO_P3, &gpio_config);
  32   1      
  33   1        /* LED端口 */
  34   1        gpio_config.Pin = GPIO_Pin_4 | GPIO_Pin_5;
  35   1        GPIO_Inilize(GPIO_P1, &gpio_config);
  36   1      
  37   1        gpio_config.Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 | GPIO_Pin_7;
  38   1        GPIO_Inilize(GPIO_P2, &gpio_config);
  39   1      
  40   1        /* 初始化总开关-SW */
  41   1        gpio_config.Pin = GPIO_Pin_5;
  42   1        gpio_config.Mode = GPIO_OUT_PP; // 推挽输出模式
  43   1        GPIO_Inilize(GPIO_P4, &gpio_config);
  44   1      }
  45          
  46          /*初始化PWM*/
  47          #define PERIOD (MAIN_Fosc / 1000)
  48          PWMx_Duty dutyA;
  49          void PWM_config(void)
  50          {
  51   1        PWMx_InitDefine PWMx_InitStructure;
  52   1      
  53   1        // 配置PWM4
  54   1        PWMx_InitStructure.PWM_Mode = CCMRn_PWM_MODE2;    // 模式,    CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_I
C51 COMPILER V9.60.7.0   MAIN                                                              06/23/2024 21:43:24 PAGE 2   

             -NVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  55   1        PWMx_InitStructure.PWM_Duty = dutyA.PWM4_Duty;    // PWM占空比时间, 0~Period
  56   1        PWMx_InitStructure.PWM_EnoSelect = ENO4P | ENO4N; // 输出通道选择,  ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,EN
             -O3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  57   1        PWM_Configuration(PWM4, &PWMx_InitStructure);
  58   1      
  59   1        // 配置PWMA
  60   1        PWMx_InitStructure.PWM_Period = PERIOD - 1;    // 周期时间,   0~65535
  61   1        PWMx_InitStructure.PWM_DeadTime = 0;       // 死区发生器设置, 0~255
  62   1        PWMx_InitStructure.PWM_MainOutEnable = ENABLE; // 主输出使能, ENABLE,DISABLE
  63   1        PWMx_InitStructure.PWM_CEN_Enable = ENABLE;    // 使能计数器, ENABLE,DISABLE
  64   1        PWM_Configuration(PWMA, &PWMx_InitStructure);  // 初始化PWM通用寄存器,  PWMA,PWMB
  65   1      
  66   1        // 切换PWM通道
  67   1        PWM4_SW(PWM4_SW_P26_P27); // PWM4_SW_P16_P17,PWM4_SW_P26_P27,PWM4_SW_P66_P67,PWM4_SW_P34_P33
  68   1      
  69   1        // 初始化PWMA的中断
  70   1        NVIC_PWM_Init(PWMA, DISABLE, Priority_0);
  71   1      }
  72          
  73          /*初始化UART1*/
  74          void UART_config(void)
  75          {
  76   1        // >>> 记得添加 NVIC.c, UART.c, UART_Isr.c <<<
  77   1        COMx_InitDefine COMx_InitStructure;       // 结构定义
  78   1        COMx_InitStructure.UART_Mode = UART_8bit_BRTx;  // 模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9
             -bit_BRTx
  79   1        COMx_InitStructure.UART_BRT_Use = BRT_Timer1; // 选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意
             -: 串口2固定使用BRT_Timer2)
  80   1        COMx_InitStructure.UART_BaudRate = 115200ul;  // 波特率, 一般 110 ~ 115200
  81   1        COMx_InitStructure.UART_RxEnable = ENABLE;    // 接收允许,   ENABLE或DISABLE
  82   1        COMx_InitStructure.BaudRateDouble = DISABLE;  // 波特率加倍, ENABLE或DISABLE
  83   1        UART_Configuration(UART1, &COMx_InitStructure); // 初始化串口1 UART1,UART2,UART3,UART4
  84   1      
  85   1        NVIC_UART1_Init(ENABLE, Priority_1); // 中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Pri
             -ority_1,Priority_2,Priority_3
  86   1        UART1_SW(UART1_SW_P30_P31);      // 引脚选择, UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_
             -SW_P43_P44
  87   1      }
  88          
  89          // 在接收数据回调函数内控制PWM的占空比
  90          char duty_percent = 0; // 0 -> 100，标识占空比占整个周期多长时间
  91          void on_receive()
  92          {
  93   1        u8 dat = RX1_Buffer[0];
  94   1        // 接收到0，降低占空比
  95   1        if (dat == 0x00)
  96   1        {
  97   2          duty_percent -= 1;
  98   2          printf("duty_percent:%d\n",(int)duty_percent);
  99   2          // 如果占空比已减法至0，维持0即可，不能让其变为负数
 100   2          if (duty_percent < 0)
 101   2          {
 102   3            duty_percent = 0;
 103   3          }
 104   2        }
 105   1        else if (dat == 0x01) // 接收到1，提高占空比
 106   1        {
 107   2          duty_percent += 1;
 108   2          printf("duty_percent:%d\n",(int)duty_percent);
 109   2          // 如果占空比已增至100，维持100即可，不能让其超过100
 110   2          if (duty_percent > 100)
C51 COMPILER V9.60.7.0   MAIN                                                              06/23/2024 21:43:24 PAGE 3   

 111   2          {
 112   3            duty_percent = 100;
 113   3          }
 114   2        }
 115   1        // 更新设置后的占空比
 116   1        dutyA.PWM4_Duty = PERIOD * duty_percent / 100; // 设置占空比: 周期时间 * 占空比
 117   1        UpdatePwm(PWM4, &dutyA);
 118   1      }
 119          
 120          int main()
 121          {
 122   1        char i = 0;
 123   1        EAXSFR(); /* 扩展寄存器访问使能 */
 124   1      
 125   1        gpio_init();
 126   1        PWM_config();
 127   1        UART_config();
 128   1      
 129   1        // 开启全局中断
 130   1        EA = 1;
 131   1        // 开启LED总开关
 132   1        LED_SW = 0;
 133   1      
 134   1        // 点亮LED1,2,3
 135   1        LED1 = LED2 = LED3 = 0;
 136   1      
 137   1        while (1)
 138   1        {
 139   2      
 140   2          if (COM1.RX_TimeOut > 0)
 141   2          {
 142   3            // 超时计数
 143   3            if (--COM1.RX_TimeOut == 0)
 144   3            {
 145   4              if (COM1.RX_Cnt > 0)
 146   4              {
 147   5                // 这里处理收到的数据，做具体的逻辑，可以调用自己的on_uart1_recv
 148   5                for (i = 0; i < COM1.RX_Cnt; i++)
 149   5                {
 150   6                  // RX1_Buffer[i]存的是接收的每个字节，写出用 TX1_write2buff
 151   6                  on_receive();
 152   6                }
 153   5              }
 154   4              COM1.RX_Cnt = 0;
 155   4            }
 156   3          }
 157   2      
 158   2          // 不要处理的太快
 159   2          delay_ms(10);
 160   2        }
 161   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    377    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.60.7.0   MAIN                                                              06/23/2024 21:43:24 PAGE 4   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
