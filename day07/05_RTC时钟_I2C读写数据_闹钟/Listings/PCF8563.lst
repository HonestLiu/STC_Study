C51 COMPILER V9.60.7.0   PCF8563                                                           07/01/2024 09:15:06 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE PCF8563
OBJECT MODULE PLACED IN .\Objects\PCF8563.obj
COMPILER INVOKED BY: D:\AppData\Keil_v5\C51\BIN\C51.EXE PCF8563.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\PCF8563.lst) TABS(2) OBJECT(.\Objects\PCF8563.obj)

line level    source

   1          #include "PCF8563.h"
   2          #include "GPIO.h"
   3          #include "I2C.h"
   4          #include "NVIC.h"
   5          #include "Switch.h"
   6          #include "Exti.h"
   7          
   8          /****************  I2C GPIO初始化函数 *****************/
   9          //SCL --> P32   SDA --> P33
  10          static void GPIO_config() {
  11   1          GPIO_InitTypeDef gpio_init_struct;
  12   1          gpio_init_struct.Mode = GPIO_OUT_OD;//开漏输出
  13   1          gpio_init_struct.Pin = GPIO_Pin_2 | GPIO_Pin_3;//I2C总线所使用的两个IO
  14   1          GPIO_Inilize(GPIO_P3, &gpio_init_struct);
  15   1      }
  16          
  17          /****************  I2C初始化函数 *****************/
  18          void I2C_config(void) {
  19   1          I2C_InitTypeDef I2C_InitStructure;
  20   1      
  21   1          I2C_InitStructure.I2C_Mode = I2C_Mode_Master;    //主从选择   I2C_Mode_Master, I2C_Mode_Slave
  22   1          I2C_InitStructure.I2C_Enable = ENABLE;            //I2C功能使能,   ENABLE, DISABLE
  23   1          I2C_InitStructure.I2C_MS_WDTA = DISABLE;            //主机使能自动发送,  ENABLE, DISABLE
  24   1          I2C_InitStructure.I2C_Speed = 13;                //总线速度=Fosc/2/(Speed*2+4),      0~63
  25   1          I2C_Init(&I2C_InitStructure);
  26   1          NVIC_I2C_Init(I2C_Mode_Master, DISABLE,
  27   1                        Priority_0);    //主从模式, I2C_Mode_Master, I2C_Mode_Slave; 中断使能, ENABLE/DI
             -SABLE; 优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_3
  28   1      
  29   1          I2C_SW(I2C_P33_P32);                    //I2C_P14_P15,I2C_P24_P25,I2C_P33_P32
  30   1      }
  31          
  32          
  33          void PCF8563_init(void) {
  34   1          EAXSFR();//使能拓展寄存器
  35   1          GPIO_config();
  36   1          I2C_config();
  37   1      }
  38          
  39          
  40          void PCF8563_set(Clock_t *c) {
  41   1          u8 p[NUMBER];
  42   1          u8 C = CENTURY;//世纪 0: 2000  1:2100
  43   1          //将十进制数据转成BCD格式数据-> 和取数据倒着来即可
  44   1          p[0] = ((c->second / 10) << 4) + (c->second % 10);
  45   1          p[1] = WRITE_BCD(c->minute);
  46   1          p[2] = WRITE_BCD(c->hour);
  47   1          p[3] = c->week;
  48   1          p[4] = WRITE_BCD(c->day);
  49   1          C = c->year < 2100 ? 0 : 1;
  50   1          p[5] = (C << 7) + WRITE_BCD(c->month);
  51   1          p[6] = WRITE_BCD(c->year % 100);//年的范围是 0 ~99，只取十位即可
  52   1      
  53   1          //数据写入
C51 COMPILER V9.60.7.0   PCF8563                                                           07/01/2024 09:15:06 PAGE 2   

  54   1          I2C_WriteNbyte(PCF8563_DEV_ADDR, PCF8563_REG_TD, p, NUMBER);
  55   1      }
  56          
  57          void PCF8563_get(Clock_t *c) {
  58   1          u8 p[NUMBER];
  59   1          u8 C = CENTURY;//世纪 0: 2000  1:2100
  60   1          //通过I2C读取RTC时钟芯片的秒数据
  61   1          I2C_ReadNbyte(PCF8563_DEV_ADDR, PCF8563_REG_TD, p, NUMBER);
  62   1      
  63   1          //解析得到的数据
  64   1          c->second = ((p[0] >> 4) & 0x07) * 10 + (p[0] & 0x0F);//秒，高4位全取，低4位全取
  65   1          c->minute = ((p[1] >> 4) & 0x07) * 10 + (p[1] & 0x0F);//分，高4位全取，低4位全取
  66   1          c->hour = ((p[2] >> 4) & 0x03) * 10 + (p[2] & 0x0F);//时，高4位需要取两位，低4位全取
  67   1          c->day = ((p[3] >> 4) & 0x03) * 10 + (p[3] & 0x0F);//天，高4位需要取两位，低4位全取
  68   1          c->week = p[4] & 0x07;//周,只取低3位
  69   1          c->month = ((p[5] >> 4) & 0x01) * 10 + (p[5] & 0x0F);//月,高4位取1位，低4位全取
  70   1          C = p[5] >> 7;//世纪，只取最高位。 --> 0表示20xx年 1表示21xx年
  71   1          c->year = ((p[6] >> 4) & 0x0F) * 10 + (p[6] & 0x0F);//年，全都要;  --> 其范围是0~99
  72   1      
  73   1          /*根据BSD获取的年的范围是0~99，需要得到我们常见的"年"，需要将BSD得到的year
             -与C所对应的值相加*/
  74   1          c->year += (C == 0 ? 2000 : 2100);
  75   1      }
  76          
  77          void PCF8563_set_alarm(Alarm_t a) {
  78   1          //存储闹钟设置值转成BCD码后的值
  79   1          u8 alarm[4];
  80   1      
  81   1          /*2.十进制转BCD码*/
  82   1          alarm[0] = WRITE_BCD(a.minute);
  83   1          alarm[0] = WRITE_BCD(a.hour);
  84   1          alarm[0] = WRITE_BCD(a.day);
  85   1          alarm[0] = WRITE_BCD(a.week_day);
  86   1          /*3.将分钟的地址作为写入地址，连续将分、时、天、周写入(会自动递增)*/
  87   1          I2C_WriteNbyte(PCF8563_DEV_ADDR, 0x09, alarm, 4);
  88   1      
  89   1      }
  90          
  91          void PCF8563_enable_alarm() {
  92   1          //存储状态控制寄存器2的值
  93   1          u8 Control_status_2 = 0;
  94   1      
  95   1          //先将状态控制寄存器2整个读出来
  96   1          I2C_ReadNbyte(PCF8563_DEV_ADDR, 0x01, &Control_status_2, 1);
  97   1          //清除AF闹钟标记，不清闹钟不会响
  98   1          Control_status_2 &= ~0x08;
  99   1          //将AIE位置1，使能闹钟
 100   1          Control_status_2 |= 0x02;
 101   1          //将修改后的状态寄存器2的值写回
 102   1          I2C_WriteNbyte(PCF8563_DEV_ADDR, 0x01, &Control_status_2, 1);
 103   1      }
 104          
 105          
 106          void PCF8536_alarm_clear_flag() {
 107   1      //存储状态控制寄存器2的值
 108   1          u8 Control_status_2 = 0;
 109   1      
 110   1          //先将状态控制寄存器2整个读出来
 111   1          I2C_ReadNbyte(PCF8563_DEV_ADDR, 0x01, &Control_status_2, 1);
 112   1          //清除AF闹钟标记，不清闹钟不会响
 113   1          Control_status_2 &= ~0x08;
 114   1          //将修改后的状态寄存器2的值写回
C51 COMPILER V9.60.7.0   PCF8563                                                           07/01/2024 09:15:06 PAGE 3   

 115   1          I2C_WriteNbyte(PCF8563_DEV_ADDR, 0x01, &Control_status_2, 1);
 116   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    692    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      39
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
