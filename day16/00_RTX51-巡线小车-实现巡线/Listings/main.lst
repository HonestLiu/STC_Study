C51 COMPILER V9.60.7.0   MAIN                                                              07/12/2024 13:27:28 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\AppData\Keil_v5\C51\BIN\C51.EXE User\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          // 外部设备
   2          #include "../Drive/Buzzer.h"
   3          #include "../Drive/Key.h"
   4          #include "../Drive/Light.h"
   5          #include "../Drive/Motors.h"
   6          #include "../Drive/Track.h"
   7          #include "../Drive/Ultrasonic.h"
   8          #include "../Drive/battery.h"
   9          
  10          // 片上外设
  11          #include "../Lib/Config.h"
  12          #include "../Lib/NVIC.h"
  13          #include "../Lib/Switch.h"
  14          #include "../Lib/UART.h"
  15          
  16          #include "RTX51TNY.h" //RTX51的系统头文件
  17          #include <cstdio>
*** WARNING C318 IN LINE 17 OF User\main.c: can't open file 'cstdio'
  18          #include <stdio.h>
  19          
  20          void UART_config(void) {
  21   1        // >>> 记得添加 NVIC.c, UART.c, UART_Isr.c <<<
  22   1        COMx_InitDefine COMx_InitStructure; // 结构定义
  23   1        COMx_InitStructure.UART_Mode =
  24   1            UART_8bit_BRTx; // 模式,
  25   1                            // UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx
  26   1        COMx_InitStructure.UART_BRT_Use =
  27   1            BRT_Timer1; // 选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意:
  28   1                        // 串口2固定使用BRT_Timer2)
  29   1        COMx_InitStructure.UART_BaudRate = 115200ul; // 波特率, 一般 110 ~ 115200
  30   1        COMx_InitStructure.UART_RxEnable = ENABLE; // 接收允许,   ENABLE或DISABLE
  31   1        COMx_InitStructure.BaudRateDouble = DISABLE; // 波特率加倍, ENABLE或DISABLE
  32   1        UART_Configuration(
  33   1            UART1, &COMx_InitStructure); // 初始化串口1 UART1,UART2,UART3,UART4
  34   1      
  35   1        NVIC_UART1_Init(ENABLE,
  36   1                        Priority_1); // 中断使能, ENABLE/DISABLE; 优先级(低到高)
  37   1                                     // Priority_0,Priority_1,Priority_2,Priority_3
  38   1        UART1_SW(
  39   1            UART1_SW_P30_P31); // 引脚选择,
  40   1                               // UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
  41   1      }
  42          
  43          void sys_init() {
  44   1        EAXSFR();
  45   1        // 片上外设初始化
  46   1        UART_config(); // 初始化UART
  47   1      
  48   1        // 驱动初始化
  49   1        Light_init();      // 初始化转向灯
  50   1        KEY_init();        // 初始化按钮
  51   1        Battery_init();    // 初始化ADC电源检测
  52   1        buzzer_init();     // 初始化蜂鸣器
  53   1        Ultrasonic_init(); // 初始化超声波模块
C51 COMPILER V9.60.7.0   MAIN                                                              07/12/2024 13:27:28 PAGE 2   

  54   1        Track_init();      // 初始化巡线模块
  55   1        Motor_init();      // 初始化电机控制
  56   1      
  57   1        EA = 1;
  58   1      }
  59          
  60          void start_main() _task_ 0 {
  61   1        sys_init();
  62   1        os_create_task(1); // 创建按键任务
  63   1      
  64   1        // 销毁自己
  65   1        os_delete_task(0);
  66   1      }
  67          
  68          u8 track_state = 0; // 巡线功能状态 0：未启用 1:已启用
  69          void KEY_down() {
  70   1        Light_on(ALL);
  71   1        if (!track_state) {
  72   2          printf("启用巡线\n");
  73   2          os_create_task(2); // 创建巡线任务
  74   2        } else {
  75   2          printf("关闭巡线\n");
  76   2          os_delete_task(2); // 销毁巡线任务
  77   2        }
  78   1        // 更新巡线状态
  79   1        track_state = !track_state;
  80   1      }
  81          
  82          void KEY_up() { Light_off(ALL); }
  83          
  84          void task_Key() _task_ 1 {
  85   1      
  86   1        while (1) {
  87   2          KEY_scan();
  88   2          os_wait2(K_TMO, 2);
  89   2        }
  90   1      }
  91          
  92          void task_Track() _task_ 2 {
  93   1        int pos = 0, last_pos = -10;
  94   1        while (1) {
  95   2          
  96   2      
  97   2          pos = Track_get_position();
  98   2          //如果pos等于last_pos，则跳过当前调用，节约系统资源
  99   2          if (pos == last_pos) {
 100   3            os_wait2(K_TMO, 2);//休眠一小会，避免其重复调用Track_get_position
 101   3            continue;
 102   3          }
 103   2          //更新last_pos
 104   2          last_pos = pos;
 105   2          printf("pos: %d\n", pos);
 106   2          
 107   2          if (pos < 0) {
 108   3            printf("Motor_left\n");
 109   3            Motor_left(60);
 110   3          } else if (pos > 0) {
 111   3            printf("Motor_right\n");
 112   3            Motor_right(60);
 113   3          } else {
 114   3            printf("Motor_forward\n");
 115   3            Motor_forward(70);
C51 COMPILER V9.60.7.0   MAIN                                                              07/12/2024 13:27:28 PAGE 3   

 116   3          }
 117   2      
 118   2          os_wait2(K_TMO, 4); // 5 * 4 = 20ms,每20ms获取一次
 119   2        }
 120   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    330    ----
   CONSTANT SIZE    =     69    ----
   XDATA SIZE       =      1      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
