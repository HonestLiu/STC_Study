C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2024 10:14:54 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\AppData\Keil_v5\C51\BIN\C51.EXE User\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib) DEBUG OBJECTE
                    -XTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          // 外部设备
   2          #include "../Drive/Buzzer.h"
   3          #include "../Drive/Key.h"
   4          #include "../Drive/Light.h"
   5          #include "../Drive/Track.h"
   6          #include "../Drive/Ultrasonic.h"
   7          #include "../Drive/battery.h"
   8          // 片上外设
   9          #include "../Lib/Config.h"
  10          #include "../Lib/GPIO.h"
  11          #include "../Lib/NVIC.h"
  12          #include "../Lib/Switch.h"
  13          #include "../Lib/UART.h"
  14          
  15          #include "RTX51TNY.h" //RTX51的系统头文件
  16          
  17          #define RQ_B P15
  18          #define RQ_F P14
  19          
  20          void GPIO_Config(void) {
  21   1        // 初始化为准双向即可
  22   1        P1_MODE_IO_PU(GPIO_Pin_4 | GPIO_Pin_5);
  23   1      }
  24          
  25          void UART_config(void) {
  26   1        // >>> 记得添加 NVIC.c, UART.c, UART_Isr.c <<<
  27   1        COMx_InitDefine COMx_InitStructure; // 结构定义
  28   1        COMx_InitStructure.UART_Mode =
  29   1            UART_8bit_BRTx; // 模式,
  30   1                            // UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx
  31   1        COMx_InitStructure.UART_BRT_Use =
  32   1            BRT_Timer1; // 选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意:
  33   1                        // 串口2固定使用BRT_Timer2)
  34   1        COMx_InitStructure.UART_BaudRate = 115200ul; // 波特率, 一般 110 ~ 115200
  35   1        COMx_InitStructure.UART_RxEnable = ENABLE; // 接收允许,   ENABLE或DISABLE
  36   1        COMx_InitStructure.BaudRateDouble = DISABLE; // 波特率加倍, ENABLE或DISABLE
  37   1        UART_Configuration(
  38   1            UART1, &COMx_InitStructure); // 初始化串口1 UART1,UART2,UART3,UART4
  39   1      
  40   1        NVIC_UART1_Init(ENABLE,
  41   1                        Priority_1); // 中断使能, ENABLE/DISABLE; 优先级(低到高)
  42   1                                     // Priority_0,Priority_1,Priority_2,Priority_3
  43   1        UART1_SW(
  44   1            UART1_SW_P30_P31); // 引脚选择,
  45   1                               // UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
  46   1      }
  47          
  48          void sys_init() {
  49   1        EAXSFR();
  50   1        // 片上外设初始化
  51   1        UART_config(); // 初始化UART
  52   1        GPIO_Config();
  53   1      
  54   1        // 驱动初始化
C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2024 10:14:54 PAGE 2   

  55   1        Light_init();      // 初始化转向灯
  56   1        KEY_init();        // 初始化按钮
  57   1        Battery_init();    // 初始化ADC电源检测
  58   1        buzzer_init();     // 初始化蜂鸣器
  59   1        Ultrasonic_init(); // 初始化超声波模块
  60   1        Track_init();      // 初始化巡线模块
  61   1      
  62   1        EA = 1;
  63   1      }
  64          
  65          void start_main() _task_ 0 {
  66   1        sys_init();
  67   1        os_create_task(1); // 创建按键任务
  68   1        // os_create_task(2); // 创建巡线任务
  69   1      
  70   1        // 销毁自己
  71   1        os_delete_task(0);
  72   1      }
  73          
  74          void KEY_down() {
  75   1        static u8 last_machinery_state = 1;
  76   1      
  77   1        Light_on(ALL);
  78   1        if (last_machinery_state) // 前进
  79   1        {
  80   2          RQ_B = 1;
  81   2          RQ_F = 0;
  82   2        } else { // 后退
  83   2          RQ_B = 0;
  84   2          RQ_F = 1;
  85   2        }
  86   1        // 取反电机状态
  87   1        last_machinery_state = !last_machinery_state;
  88   1      }
  89          
  90          void KEY_up() { Light_off(ALL); }
  91          
  92          void task_Key() _task_ 1 {
  93   1      
  94   1        while (1) {
  95   2          KEY_scan();
  96   2          os_wait2(K_TMO, 2);
  97   2        }
  98   1      }
  99          
 100          void task_Track() _task_ 2 {
 101   1      
 102   1        while (1) {
 103   2          u8 code states[5];
 104   2          char i;
 105   2          int pos;
 106   2      
 107   2          Track_get_state(&states);
 108   2          for (i = 4; i >= 0; i--) {
 109   3            printf("%d ", (int)states[i]);
 110   3          }
 111   2          printf("\n");
 112   2      
 113   2          pos = Track_get_position();
 114   2          printf("pos: %d\n", pos);
 115   2      
 116   2          os_wait2(K_TMO, 40); // 5 * 40 = 200ms,每200ms获取一次
C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2024 10:14:54 PAGE 3   

 117   2        }
 118   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    240    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
