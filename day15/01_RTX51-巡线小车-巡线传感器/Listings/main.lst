C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2024 09:15:18 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\AppData\Keil_v5\C51\BIN\C51.EXE User\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib) DEBUG OBJECTE
                    -XTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "../Drive/Buzzer.h"
   2          #include "../Drive/Key.h"
   3          #include "../Drive/Light.h"
   4          #include "../Drive/Track.h"
   5          #include "../Drive/Ultrasonic.h"
   6          #include "../Drive/battery.h"
   7          #include "../Lib/Config.h"
   8          #include "../Lib/NVIC.h"
   9          #include "../Lib/Switch.h"
  10          #include "../Lib/UART.h"
  11          #include "RTX51TNY.h" //RTX51的系统头文件
  12          #include <stdio.h>
  13          
  14          void UART_config(void) {
  15   1        // >>> 记得添加 NVIC.c, UART.c, UART_Isr.c <<<
  16   1        COMx_InitDefine COMx_InitStructure; // 结构定义
  17   1        COMx_InitStructure.UART_Mode =
  18   1            UART_8bit_BRTx; // 模式,
  19   1                            // UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx
  20   1        COMx_InitStructure.UART_BRT_Use =
  21   1            BRT_Timer1; // 选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意:
  22   1                        // 串口2固定使用BRT_Timer2)
  23   1        COMx_InitStructure.UART_BaudRate = 115200ul; // 波特率, 一般 110 ~ 115200
  24   1        COMx_InitStructure.UART_RxEnable = ENABLE; // 接收允许,   ENABLE或DISABLE
  25   1        COMx_InitStructure.BaudRateDouble = DISABLE; // 波特率加倍, ENABLE或DISABLE
  26   1        UART_Configuration(
  27   1            UART1, &COMx_InitStructure); // 初始化串口1 UART1,UART2,UART3,UART4
  28   1      
  29   1        NVIC_UART1_Init(ENABLE,
  30   1                        Priority_1); // 中断使能, ENABLE/DISABLE; 优先级(低到高)
  31   1                                     // Priority_0,Priority_1,Priority_2,Priority_3
  32   1        UART1_SW(
  33   1            UART1_SW_P30_P31); // 引脚选择,
  34   1                               // UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
  35   1      }
  36          
  37          void sys_init() {
  38   1        EAXSFR();
  39   1        // 片上外设初始化
  40   1        UART_config(); // 初始化UART
  41   1      
  42   1        // 驱动初始化
  43   1        Light_init();      // 初始化转向灯
  44   1        KEY_init();        // 初始化按钮
  45   1        Battery_init();    // 初始化ADC电源检测
  46   1        buzzer_init();     // 初始化蜂鸣器
  47   1        Ultrasonic_init(); // 初始化超声波模块
  48   1        Track_init();      // 初始化巡线模块
  49   1      
  50   1        EA = 1;
  51   1      }
  52          
  53          void start_main() _task_ 0 {
  54   1        sys_init();
C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2024 09:15:18 PAGE 2   

  55   1        os_create_task(1); // 创建任务1
  56   1                           // os_create_task(2);//创建任务2
  57   1      
  58   1        // 销毁自己
  59   1        os_delete_task(0);
  60   1      }
  61          
  62          void KEY_down() {
  63   1        char dis_res = 0;
  64   1        float voltage;  // ADC检测结果返回值
  65   1        float distance; // 超声波测距返回结果
  66   1      
  67   1        Light_on(ALL);
  68   1      
  69   1        Battery_get_voltage(&voltage); // 获取电源ADC检测结果
  70   1      
  71   1        buzzer_beep(); // 无源蜂鸣器发出声音
  72   1      
  73   1        dis_res = Ultrasonic_get_distance(&distance);
  74   1        if (dis_res == 0) {
  75   2          printf("距离获取成功: %.2f cm\n", distance);
  76   2        } else if (dis_res == 1) {
  77   2          printf("小于可测距离: %.2f cm\n", distance);
  78   2        } else if (dis_res == 2) {
  79   2          printf("大于可测距离: %.2f cm\n", distance);
  80   2        } else {
  81   2          printf("距离获取失败");
  82   2        }
  83   1      }
  84          
  85          void KEY_up() { Light_off(ALL); }
  86          
  87          void task_Key() _task_ 1 {
  88   1      
  89   1        while (1) {
  90   2          KEY_scan();
  91   2          os_wait2(K_TMO, 2);
  92   2        }
  93   1      }
  94          
  95          void task_Track() _task_ 2 {
  96   1      
  97   1        while (1) {
  98   2          u8 code states[5];
  99   2          char i;
 100   2          int pos;
 101   2      
 102   2          Track_get_state(&states);
 103   2          for (i = 4; i >= 0; i--) {
 104   3            printf("%d ", (int)states[i]);
 105   3          }
 106   2          printf("\n");
 107   2      
 108   2          pos = Track_get_position();
 109   2          printf("pos: %d\n", pos);
 110   2      
 111   2          os_wait2(K_TMO, 40); // 5 * 40 = 200ms,每200ms获取一次
 112   2        }
 113   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2024 09:15:18 PAGE 3   

   CODE SIZE        =    287    ----
   CONSTANT SIZE    =    102    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
