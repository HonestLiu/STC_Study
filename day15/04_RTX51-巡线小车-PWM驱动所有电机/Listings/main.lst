C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2024 14:21:44 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\AppData\Keil_v5\C51\BIN\C51.EXE User\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Lib) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          // 外部设备
   2          #include "../Drive/Buzzer.h"
   3          #include "../Drive/Key.h"
   4          #include "../Drive/Light.h"
   5          #include "../Drive/Motors.h"
   6          #include "../Drive/Track.h"
   7          #include "../Drive/Ultrasonic.h"
   8          #include "../Drive/battery.h"
   9          
  10          // 片上外设
  11          #include "../Lib/Config.h"
  12          #include "../Lib/NVIC.h"
  13          #include "../Lib/Switch.h"
  14          #include "../Lib/UART.h"
  15          
  16          #include "RTX51TNY.h" //RTX51的系统头文件
  17          
  18          void UART_config(void) {
  19   1        // >>> 记得添加 NVIC.c, UART.c, UART_Isr.c <<<
  20   1        COMx_InitDefine COMx_InitStructure; // 结构定义
  21   1        COMx_InitStructure.UART_Mode =
  22   1            UART_8bit_BRTx; // 模式,
  23   1                            // UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9bit_BRTx
  24   1        COMx_InitStructure.UART_BRT_Use =
  25   1            BRT_Timer1; // 选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意:
  26   1                        // 串口2固定使用BRT_Timer2)
  27   1        COMx_InitStructure.UART_BaudRate = 115200ul; // 波特率, 一般 110 ~ 115200
  28   1        COMx_InitStructure.UART_RxEnable = ENABLE; // 接收允许,   ENABLE或DISABLE
  29   1        COMx_InitStructure.BaudRateDouble = DISABLE; // 波特率加倍, ENABLE或DISABLE
  30   1        UART_Configuration(
  31   1            UART1, &COMx_InitStructure); // 初始化串口1 UART1,UART2,UART3,UART4
  32   1      
  33   1        NVIC_UART1_Init(ENABLE,
  34   1                        Priority_1); // 中断使能, ENABLE/DISABLE; 优先级(低到高)
  35   1                                     // Priority_0,Priority_1,Priority_2,Priority_3
  36   1        UART1_SW(
  37   1            UART1_SW_P30_P31); // 引脚选择,
  38   1                               // UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
  39   1      }
  40          
  41          void sys_init() {
  42   1        EAXSFR();
  43   1        // 片上外设初始化
  44   1        UART_config(); // 初始化UART
  45   1      
  46   1        // 驱动初始化
  47   1        Light_init();      // 初始化转向灯
  48   1        KEY_init();        // 初始化按钮
  49   1        Battery_init();    // 初始化ADC电源检测
  50   1        buzzer_init();     // 初始化蜂鸣器
  51   1        Ultrasonic_init(); // 初始化超声波模块
  52   1        Track_init();      // 初始化巡线模块
  53   1        Motor_init();      // 初始化电机控制
  54   1      
C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2024 14:21:44 PAGE 2   

  55   1        EA = 1;
  56   1      }
  57          
  58          void start_main() _task_ 0 {
  59   1        sys_init();
  60   1        os_create_task(1); // 创建按键任务
  61   1        // os_create_task(2); // 创建巡线任务
  62   1      
  63   1        // 销毁自己
  64   1        os_delete_task(0);
  65   1      }
  66          
  67          u8 mode = 0; // 模式 0:前进 1:后退 2:停止
  68          void KEY_down() {
  69   1        Light_on(ALL);
  70   1      
  71   1        // 按键按下，调整模式
  72   1        switch (mode) {
  73   2          case 0:
  74   2            Motor_forward(70);
  75   2            break;
  76   2          case 1:
  77   2            Motor_backward(30);
  78   2            break;
  79   2          case 2:
  80   2            Motor_left(70);
  81   2            break;
  82   2          case 3:
  83   2            Motor_right(70);
  84   2          default:
  85   2            Motor_stop();
  86   2            break;
  87   2        }
  88   1        mode++;
  89   1        if (mode > 4)
  90   1        {
  91   2          mode = 0;
  92   2        }
  93   1      }
  94          
  95          void KEY_up() { Light_off(ALL); }
  96          
  97          void task_Key() _task_ 1 {
  98   1      
  99   1        while (1) {
 100   2          KEY_scan();
 101   2          os_wait2(K_TMO, 2);
 102   2        }
 103   1      }
 104          
 105          void task_Track() _task_ 2 {
 106   1      
 107   1        while (1) {
 108   2          u8 code states[5];
 109   2          char i;
 110   2          int pos;
 111   2      
 112   2          Track_get_state(&states);
 113   2          for (i = 4; i >= 0; i--) {
 114   3            printf("%d ", (int)states[i]);
 115   3          }
 116   2          printf("\n");
C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2024 14:21:44 PAGE 3   

 117   2      
 118   2          pos = Track_get_position();
 119   2          printf("pos: %d\n", pos);
 120   2      
 121   2          os_wait2(K_TMO, 40); // 5 * 40 = 200ms,每200ms获取一次
 122   2        }
 123   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    299    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =      1      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
